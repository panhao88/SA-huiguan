{"remainingRequest":"C:\\work\\workspace\\rock-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\workspace\\rock-ui\\src\\views\\rights\\Account.vue?vue&type=template&id=42938822&scoped=true&","dependencies":[{"path":"C:\\work\\workspace\\rock-ui\\src\\views\\rights\\Account.vue","mtime":1611212483224},{"path":"C:\\work\\workspace\\rock-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\workspace\\rock-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\work\\workspace\\rock-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\workspace\\rock-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}